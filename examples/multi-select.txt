Select all columns for output (normally achieved with -A):
--
>  echo -e "a\tb\tc\n3\t4\t5" | ./pick '.*'
a       b       c
3       4       5

Select all columns, apply the same computation (cannot be empty however):
--
>  echo -e "a\tb\tc\n3\t4\t5" | ./pick '.*'::
Compute cannot be empty

The -i in-place options is required to allow potential overwriting of existing columns:
--
>  echo -e "a\tb\tc\n3\t4\t5" | ./pick '.*'::^foo
Name a already defined (use -i for in-place change)

Computation consisting of the constant value 'foo';:
--
>  echo -e "a\tb\tc\n3\t4\t5" | ./pick -i '.*'::^foo
a       b       c
foo     foo     foo

Computation consisting of the column itself:
--
>  echo -e "a\tb\tc\n3\t4\t5" | ./pick -i '.*'::__
a       b       c
3       4       5

Computation consisting of the column duplicated:
--
>  echo -e "a\tb\tc\n3\t4\t5" | ./pick -i '.*'::__:__
a       b       c
33      44      55

Computation consisting of the column squared:
--
>  echo -e "a\tb\tc\n3\t4\t5" | ./pick -i '.*'::__,sq
a       b       c
9       16      25

Create a new column name by adding 'x'; now -i is not needed, -A shows the original columns:
--
>  echo -e "a\tb\tc\n3\t4\t5" | ./pick -A '.*'/x::__,sq
a       b       c       ax      bx      cx
3       4       5       9       16      25

Multiple computations are possible:
--
>  echo -e "a\tb\tc\n3\t4\t5" | ./pick -A '.*'/x::__,sq '.*'/y::__,sq,sq
a       b       c       ax      bx      cx      ay      by      cy
3       4       5       9       16      25      81      256     625

The first column is 3+4+5=12, then the second column is 12+4+5=21, the third 12+21+5 (not particularly useful):
--
>  echo -e "a\tb\tc\n3\t4\t5" | ./pick -i '.*'::'.*',addall
a       b       c
12      21      38

